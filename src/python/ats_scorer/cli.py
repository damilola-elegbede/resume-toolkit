"""CLI for ATS scoring functionality."""

import sys
from pathlib import Path

import click
from rich.console import Console
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.table import Table
from rich.text import Text

from .scorer import score_resume

console = Console()


def read_file(path: Path) -> str:
    """Read file content.

    Args:
        path: Path to file

    Returns:
        File content as string

    Raises:
        click.ClickException: If file cannot be read
    """
    try:
        return path.read_text(encoding="utf-8")
    except FileNotFoundError:
        raise click.ClickException(f"File not found: {path}")
    except Exception as e:
        raise click.ClickException(f"Error reading file {path}: {e}")


def get_score_emoji(score: float) -> str:
    """Get emoji indicator for score.

    Args:
        score: Score value (0-100)

    Returns:
        Emoji string
    """
    if score >= 90:
        return "✓"
    if score >= 75:
        return "⚠"
    return "✗"


def get_score_color(score: float) -> str:
    """Get color for score display.

    Args:
        score: Score value (0-100)

    Returns:
        Color name for Rich
    """
    if score >= 90:
        return "green"
    if score >= 75:
        return "yellow"
    return "red"


def format_score_display(label: str, score: float, indent: int = 0) -> Text:
    """Format score for display.

    Args:
        label: Score label
        score: Score value
        indent: Indentation level

    Returns:
        Formatted Rich Text
    """
    prefix = "  " * indent
    emoji = get_score_emoji(score)
    color = get_score_color(score)

    text = Text()
    text.append(f"{prefix}{label}: ", style="bold")
    text.append(f"{score:.0f}% {emoji}", style=color)

    return text


def save_report_to_markdown(
    output_path: Path,
    resume_path: str,
    jd_source: str,
    score_data: dict,
) -> None:
    """Save ATS score report to markdown file.

    Args:
        output_path: Path to output markdown file
        resume_path: Path to resume file
        jd_source: Job description source (path or URL)
        score_data: Score data dictionary
    """
    overall = score_data["overall_score"]
    breakdown = score_data["breakdown"]
    recommendations = score_data["recommendations"]

    md_content = f"""# ATS Compatibility Report

**Resume:** {resume_path}
**Job Description:** {jd_source}
**Generated:** {{current_date}}

---

## Overall Score: {overall:.1f}%

"""

    # Score breakdown
    md_content += "## Score Breakdown\n\n"
    md_content += f"- **Keyword Match:** {breakdown['keyword_match']:.0f}%\n"
    md_content += f"- **Formatting:** {breakdown['formatting']:.0f}%\n"
    md_content += f"- **Skills Alignment:** {breakdown['skills_alignment']:.0f}%\n"
    md_content += f"- **Section Structure:** {breakdown['section_structure']:.0f}%\n\n"

    # Recommendations
    if recommendations:
        md_content += "## Recommendations to Improve Score\n\n"
        for i, rec in enumerate(recommendations, 1):
            category_emoji = {
                "keyword": "🔑",
                "formatting": "📝",
                "skills": "💡",
                "structure": "🏗",
            }.get(rec["category"], "•")

            md_content += f"{i}. {category_emoji} **{rec['category'].title()}** "
            md_content += f"(+{rec['impact']:.0f}% impact): {rec['description']}\n"

    md_content += "\n---\n\n*Generated by Resume Toolkit ATS Scorer*\n"

    output_path.write_text(md_content, encoding="utf-8")
    console.print(f"[green]Report saved to:[/green] {output_path}")


@click.command()
@click.option(
    "--resume",
    "-r",
    type=click.Path(exists=True, path_type=Path),
    required=True,
    help="Path to resume file (markdown or text)",
)
@click.option(
    "--job-description",
    "--jd",
    type=click.Path(exists=True, path_type=Path),
    required=True,
    help="Path to job description file",
)
@click.option(
    "--output",
    "-o",
    type=click.Path(path_type=Path),
    help="Path to save report markdown (optional)",
)
@click.option(
    "--json",
    "output_json",
    is_flag=True,
    help="Output results as JSON",
)
@click.option(
    "--verbose",
    "-v",
    is_flag=True,
    help="Show detailed breakdown",
)
def main(
    resume: Path,
    job_description: Path,
    output: Path | None,
    output_json: bool,
    verbose: bool,
) -> None:
    """Score resume against job description for ATS compatibility.

    \b
    Examples:
        ats-scorer -r resume.md --jd job_description.txt
        ats-scorer -r resume.md --jd jd.txt -o report.md
        ats-scorer -r resume.md --jd jd.txt --json
    """
    try:
        # Read files
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
        ) as progress:
            progress.add_task(description="Reading files...", total=None)
            resume_text = read_file(resume)
            jd_text = read_file(job_description)

            progress.add_task(description="Analyzing ATS compatibility...", total=None)
            result = score_resume(resume_text, jd_text)

        # Convert to dict for easier handling
        score_dict = result.model_dump()

        # JSON output
        if output_json:
            console.print_json(data=score_dict)
            return

        # Display results
        overall_color = get_score_color(result.overall_score)

        console.print("\n")
        console.print(
            Panel(
                f"[bold {overall_color}]{result.overall_score:.1f}%[/bold {overall_color}]",
                title="ATS Compatibility Score",
                border_style=overall_color,
            )
        )

        console.print("\n")

        # Score breakdown
        console.print("[bold]Score Breakdown:[/bold]\n")

        breakdown_table = Table(show_header=False, box=None, padding=(0, 2))
        breakdown_table.add_column("Component", style="cyan")
        breakdown_table.add_column("Score", justify="right")

        breakdown_table.add_row(
            "Keyword Match",
            format_score_display("", result.breakdown.keyword_match),
        )
        breakdown_table.add_row(
            "Formatting",
            format_score_display("", result.breakdown.formatting),
        )
        breakdown_table.add_row(
            "Skills Alignment",
            format_score_display("", result.breakdown.skills_alignment),
        )
        breakdown_table.add_row(
            "Section Structure",
            format_score_display("", result.breakdown.section_structure),
        )

        console.print(breakdown_table)

        # Detailed breakdown in verbose mode
        if verbose and result.keyword_details:
            console.print("\n[bold]Keyword Details:[/bold]")
            console.print(
                f"  Required skills match: {result.keyword_details.matched_required:.0f}%"
            )
            console.print(
                f"  Nice-to-have match: {result.keyword_details.matched_nice_to_have:.0f}%"
            )
            console.print(
                f"  Matched keywords: {len(result.keyword_details.matched_keywords)}"
            )
            console.print(
                f"  Missing keywords: {len(result.keyword_details.missing_keywords)}"
            )

        if verbose and result.skills_details:
            console.print("\n[bold]Skills Alignment Details:[/bold]")
            console.print(
                f"  Technical skills: {result.skills_details.technical_match:.0f}%"
            )
            console.print(
                f"  Leadership skills: {result.skills_details.leadership_match:.0f}%"
            )
            console.print(
                f"  Domain expertise: {result.skills_details.domain_match:.0f}%"
            )

        # Recommendations
        if result.recommendations:
            target_score = min(
                result.overall_score
                + sum(r.impact for r in result.recommendations[:3]),
                100,
            )

            console.print(
                f"\n[bold]Top Recommendations to reach {target_score:.0f}%:[/bold]\n"
            )

            for i, rec in enumerate(result.recommendations[:5], 1):
                category_color = {
                    "keyword": "blue",
                    "formatting": "magenta",
                    "skills": "green",
                    "structure": "yellow",
                }.get(rec.category, "white")

                console.print(
                    f"  {i}. [{category_color}]{rec.category.title()}[/{category_color}] "
                    f"(+{rec.impact:.0f}%): {rec.description}"
                )

        # Save report
        if output:
            console.print("\n")
            save_report_to_markdown(
                output,
                str(resume),
                str(job_description),
                score_dict,
            )

        console.print("\n")

    except Exception as e:
        error_console = Console(stderr=True)
        error_console.print(f"[bold red]Error:[/bold red] {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()

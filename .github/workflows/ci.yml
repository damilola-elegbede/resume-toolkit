name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'
  PYTHON_VERSION_PRIMARY: '3.12'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_PRIMARY }}
          cache: 'pip'

      - name: Install Node dependencies
        run: npm ci --prefer-offline

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff mypy

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier check
        run: npm run format:check

      - name: Run Ruff linter
        run: ruff check .

      - name: Run Ruff formatter check
        run: ruff format --check .

  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_PRIMARY }}
          cache: 'pip'

      - name: Install Node dependencies
        run: npm ci --prefer-offline

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mypy

      - name: Run TypeScript type check
        run: npm run type-check

      - name: Run MyPy type check
        run: mypy .

  test:
    name: Test (Node ${{ matrix.node }} / Python ${{ matrix.python }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['20.x']
        python: ['3.11', '3.12']
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'

      - name: Setup Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: 'pip'

      - name: Install Node dependencies
        run: npm ci --prefer-offline

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Vitest tests with coverage
        run: npm run test:coverage

      - name: Check Vitest coverage threshold (85% minimum)
        run: |
          echo "Verifying TypeScript coverage meets 85% threshold..."
          npm run test:coverage 2>&1 | tee coverage-output.txt
          if grep -q "ERROR: Coverage for" coverage-output.txt; then
            echo "❌ Coverage check failed! Commands must have 85%+ coverage."
            exit 1
          fi
          echo "✅ TypeScript coverage meets 85% threshold"

      - name: Run pytest tests with coverage
        run: pytest --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing

      - name: Check pytest coverage threshold (85% minimum)
        run: |
          echo "Verifying Python coverage meets 85% threshold..."
          pytest --cov=. --cov-report=term-missing --cov-fail-under=85
          echo "✅ Python coverage meets 85% threshold"

      - name: Upload Vitest coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/coverage-final.json
          flags: vitest
          name: vitest-${{ matrix.node }}-${{ matrix.python }}
        if: matrix.node == '20.x' && matrix.python == '3.12'

      - name: Upload pytest coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: pytest
          name: pytest-${{ matrix.node }}-${{ matrix.python }}
        if: matrix.node == '20.x' && matrix.python == '3.12'

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ matrix.node }}-${{ matrix.python }}
          path: |
            coverage/
            htmlcov/
            coverage.xml
        if: always()

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, type-check, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_PRIMARY }}
          cache: 'pip'

      - name: Install Node dependencies
        run: npm ci --prefer-offline

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build TypeScript
        run: npm run build

      - name: Build Python package
        run: python -m build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            build/

  all-checks-passed:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [lint, type-check, test, build]
    if: always()
    steps:
      - name: Verify all jobs passed
        run: |
          if [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.type-check.result }}" != "success" ] || \
             [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ]; then
            echo "One or more checks failed"
            exit 1
          fi
          echo "All checks passed successfully"
